name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type:check-all
      
    - name: Run specification tests
      run: npm run docs:test
      
    - name: Run sprint tests  
      run: npm run sprints:test
      
    - name: Run all specification tests
      run: npm run test:all
      
    - name: Run unit tests
      run: npm test
      
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Clean build
      run: npm run build:clean
      
    - name: Build project
      run: npm run build
      
    - name: Validate build outputs
      run: npm run build:validate
      
    - name: Validate TypeScript declarations
      run: npm run build:validate:types
      
    - name: Run smoke tests
      run: npm run build:smoke
      
    - name: Analyze build performance
      run: |
        echo "üîç Running build analysis..."
        OUTPUT_JSON=true npm run build:analyze
        
    - name: Performance metrics summary
      run: |
        echo "üìä Performance Summary:"
        echo "- Build completed at: $(date)"
        echo "- Node version: ${{ matrix.node-version }}"
        echo "- Git commit: $GITHUB_SHA"
        npm run perf:baseline:stats || echo "No baseline data available yet"
      
    - name: Store build size baseline
      run: |
        # Create performance baseline for main branch
        if [ "$GITHUB_REF" = "refs/heads/main" ]; then
          npm run perf:baseline
          echo "BUILD_SIZE_BASELINE=true" >> $GITHUB_ENV
        fi
        
    - name: Build size regression detection
      if: github.event_name == 'pull_request'
      run: |
        # Check for build size regressions in PR
        npm run test:regression || {
          echo "‚ö†Ô∏è Build size regression detected!"
          echo "Build size has increased beyond acceptable threshold."
          echo "Review the build analysis output above for optimization recommendations."
          echo "REGRESSION_DETECTED=true" >> $GITHUB_ENV
          exit 1
        }
        
    - name: Comment on PR for performance regression
      if: failure() && github.event_name == 'pull_request' && env.REGRESSION_DETECTED == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: analysis } = await github.rest.actions.getWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId
          });
          
          const comment = `## ‚ö†Ô∏è Build Performance Alert
          
          **Build size regression detected** in this pull request.
          
          ### What happened?
          - Build size has increased beyond the acceptable threshold (10%)
          - This could impact loading times and user experience
          
          ### What to do next?
          1. Review the build analysis output in the CI logs
          2. Look for optimization opportunities:
             - Remove unused dependencies
             - Enable tree shaking
             - Optimize bundle splitting
          3. Consider if the size increase is justified by new features
          
          ### Build Analysis
          You can find detailed build analysis in the \`Analyze build performance\` step above.
          
          _This comment was generated automatically by the CI performance monitoring system._`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-outputs-${{ matrix.node-version }}
        path: |
          dist/
          *.log
        retention-days: 7

  example-build-tests:
    name: Example Build Tests
    runs-on: ubuntu-latest
    needs: build-validation
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        example: [minimal-astro, full-featured]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Build integration package
      run: npm run build
      
    - name: Install example dependencies
      run: |
        cd examples/${{ matrix.example }}
        npm ci
        
    - name: Test example build with mock Stack Auth environment
      run: |
        cd examples/${{ matrix.example }}
        npm run build:test
        
    - name: Analyze example build performance
      run: |
        cd examples/${{ matrix.example }}
        echo "üîç Analyzing ${{ matrix.example }} example build performance..."
        if [ -f "package.json" ] && grep -q "build:analyze" package.json; then
          npm run build:analyze
        else
          echo "Build analysis not available for this example"
        fi
        
    - name: Archive example build artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: example-build-artifacts-${{ matrix.example }}-${{ matrix.node-version }}
        path: |
          examples/${{ matrix.example }}/dist/
          examples/${{ matrix.example }}/*.log
        retention-days: 7
        
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest  
    needs: build-validation
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Full build and validation test
      run: npm run build:test
      
    - name: Integration test build analysis
      run: |
        echo "üîç Running build analysis after integration tests..."
        OUTPUT_JSON=true npm run build:analyze
      
    - name: Test package can be installed
      run: |
        # Create a test project and try to install our package
        mkdir test-install
        cd test-install
        npm init -y
        npm install ../
        node -e "console.log('Package installed successfully')"
        
    - name: Archive test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: integration-test-artifacts-${{ matrix.node-version }}
        path: |
          test-install/
          *.log
        retention-days: 7