---
// Example demonstrating Astro.locals populated by Stack Auth middleware
import { getUser } from 'astro-stack-auth/server';

// Both methods work - middleware populates Astro.locals automatically
const userFromLocals = Astro.locals.user;
const userFromFunction = await getUser(Astro);

// Session is also available via middleware
const session = Astro.locals.session;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Middleware Example - Astro + Stack Auth</title>
    <style>
      body { font-family: system-ui; max-width: 800px; margin: 0 auto; padding: 2rem; }
      .info-box { background: #f0f9ff; border: 1px solid #0ea5e9; padding: 1rem; margin: 1rem 0; border-radius: 8px; }
      .code { background: #f5f5f5; padding: 0.5rem; border-radius: 4px; font-family: monospace; }
      .comparison { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin: 1rem 0; }
      .method { background: #fff; border: 1px solid #ddd; padding: 1rem; border-radius: 8px; }
    </style>
  </head>
  <body>
    <h1>Middleware Integration Example</h1>
    
    <div class="info-box">
      <h3>üîß How Stack Auth Middleware Works</h3>
      <p>
        The Stack Auth integration automatically adds middleware that populates 
        <code>Astro.locals.user</code> and <code>Astro.locals.session</code> on every request.
      </p>
    </div>

    <h2>Authentication Data Access Methods</h2>
    
    <div class="comparison">
      <div class="method">
        <h3>Method 1: Astro.locals (Middleware)</h3>
        <div class="code">const user = Astro.locals.user;</div>
        <p><strong>Result:</strong></p>
        {userFromLocals ? (
          <div>
            <p>‚úÖ <strong>Authenticated via middleware</strong></p>
            <ul>
              <li><strong>ID:</strong> {userFromLocals.id}</li>
              <li><strong>Email:</strong> {userFromLocals.primaryEmail}</li>
              <li><strong>Name:</strong> {userFromLocals.displayName || 'Not set'}</li>
            </ul>
          </div>
        ) : (
          <p>‚ùå <strong>Not authenticated</strong></p>
        )}
      </div>

      <div class="method">
        <h3>Method 2: getUser() Function</h3>
        <div class="code">const user = await getUser(Astro);</div>
        <p><strong>Result:</strong></p>
        {userFromFunction ? (
          <div>
            <p>‚úÖ <strong>Authenticated via function</strong></p>
            <ul>
              <li><strong>ID:</strong> {userFromFunction.id}</li>
              <li><strong>Email:</strong> {userFromFunction.primaryEmail}</li>
              <li><strong>Name:</strong> {userFromFunction.displayName || 'Not set'}</li>
            </ul>
          </div>
        ) : (
          <p>‚ùå <strong>Not authenticated</strong></p>
        )}
      </div>
    </div>

    <div class="info-box">
      <h3>üìä Data Consistency Check</h3>
      <p>
        Both methods should return identical data:
        <strong>{userFromLocals && userFromFunction && userFromLocals.id === userFromFunction.id ? '‚úÖ Consistent' : '‚ùå Inconsistent or no data'}</strong>
      </p>
    </div>

    <h2>Session Information</h2>
    
    {session ? (
      <div class="method">
        <h3>Session Details (via Astro.locals.session)</h3>
        <ul>
          <li><strong>Session ID:</strong> {session.id}</li>
          <li><strong>User ID:</strong> {session.userId}</li>
          <li><strong>Expires:</strong> {new Date(session.expiresAt).toLocaleString()}</li>
        </ul>
      </div>
    ) : (
      <div class="method">
        <h3>No Active Session</h3>
        <p>User is not currently authenticated.</p>
      </div>
    )}

    <h2>Usage Recommendations</h2>
    
    <div class="method">
      <h3>üöÄ Performance Tips</h3>
      <ul>
        <li><strong>Use Astro.locals</strong> when you need authentication data in multiple places on the same page</li>
        <li><strong>Use getUser()</strong> when you only need authentication data in one specific location</li>
        <li><strong>Both approaches</strong> have minimal performance difference due to caching</li>
      </ul>
    </div>

    <div class="method">
      <h3>üéØ When to Use Each Method</h3>
      <ul>
        <li><strong>Astro.locals.user:</strong> Layout components, shared logic, multiple components</li>
        <li><strong>getUser():</strong> Single page checks, API routes, isolated authentication logic</li>
        <li><strong>requireAuth():</strong> Protected pages that should redirect unauthenticated users</li>
      </ul>
    </div>

    <div class="info-box">
      <h3>üîí Security Note</h3>
      <p>
        Both methods are equally secure and perform the same authentication validation.
        The middleware approach just pre-populates the data for convenience.
      </p>
    </div>

    <nav style="margin-top: 2rem; padding-top: 2rem; border-top: 1px solid #ddd;">
      <a href="/">‚Üê Back to Home</a>
      {userFromLocals && (
        <>
          | <a href="/dashboard">Dashboard</a>
          | <a href="/profile">Profile</a>
        </>
      )}
      {!userFromLocals && (
        <>
          | <a href="/signin">Sign In</a>
          | <a href="/signup">Sign Up</a>
        </>
      )}
    </nav>
  </body>
</html>