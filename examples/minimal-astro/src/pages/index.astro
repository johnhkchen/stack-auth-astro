---
import { getUser } from 'astro-stack-auth/server';

const user = await getUser(Astro);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Minimal Astro + Stack Auth</title>
    <style>
      body {
        font-family: system-ui, sans-serif;
        max-width: 600px;
        margin: 2rem auto;
        padding: 1rem;
        line-height: 1.6;
      }
      .auth-state {
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 8px;
        background: #f0f9ff;
        border: 1px solid #0ea5e9;
      }
      .nav-links {
        display: flex;
        gap: 1rem;
        margin: 2rem 0;
      }
      .nav-links a {
        padding: 0.5rem 1rem;
        background: #0ea5e9;
        color: white;
        text-decoration: none;
        border-radius: 6px;
      }
      .nav-links a:hover {
        background: #0284c7;
      }
    </style>
  </head>
  <body>
    <h1>Minimal Astro + Stack Auth</h1>
    <p>A simple example showing basic Stack Auth integration with Astro.</p>
    
    <div class="auth-state">
      {user ? (
        <div>
          <p><strong>‚úÖ Signed in as:</strong> {user.displayName || user.primaryEmail}</p>
        </div>
      ) : (
        <p><strong>‚ùå Not signed in</strong></p>
      )}
    </div>

    <div class="nav-links">
      {!user ? (
        <>
          <a href="/signin">Sign In</a>
          <a href="/signup">Sign Up</a>
        </>
      ) : (
        <a href="#" onclick="signOut()">Sign Out</a>
      )}
    </div>

    <h2>What This Example Shows</h2>
    <ul>
      <li>Server-side authentication with <code>getUser()</code></li>
      <li>Basic Stack Auth React components</li>
      <li>Simple sign in and sign up flows</li>
      <li><a href="/component-showcase">üé® Component Showcase</a> - Standardized patterns and best practices</li>
    </ul>

    <script>
      // Use standardized dynamic import and error handling
      import { handleSignOut } from '../utils/demo-helpers.ts';
      
      async function signOut() {
        await handleSignOut({
          onSuccess: () => {
            console.log('Sign out successful');
            window.location.reload();
          },
          onError: (error) => {
            alert(`‚ùå Sign out error: ${error.message}`);
          }
        });
      }
      
      // Use standardized window function setup
      window.signOut = signOut;
    </script>
  </body>
</html>
